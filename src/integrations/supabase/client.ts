
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bpyzpnioddmzniuikbsn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJweXpwbmlvZGRtem5pdWlrYnNuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3ODE0MzksImV4cCI6MjA1NzM1NzQzOX0.UEdE77tebNbCdJkmX0RyNpKVp3mWhTL-hekMVNcPuIg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Helper function for incrementing values
if (!supabase.rpc) {
  // Create a placeholder rpc function if it doesn't exist
  // This will be replaced by the real implementation when Supabase is initialized
  console.warn("RPC function not available, using fallback implementation");
}

// RPC helper to increment a column value
export const incrementValue = async (value: number, rowId: string, columnName: string) => {
  try {
    // Using direct update instead of rpc
    const { data, error } = await supabase
      .from('sites')
      .update({ [columnName]: value })
      .eq('id', rowId)
      .select();
      
    if (error) throw error;
    return data;
  } catch (error) {
    console.error("Error incrementing value:", error);
    throw error;
  }
};

// Helper function to fetch invoices for a specific site
export const fetchSiteInvoices = async (siteId: string) => {
  if (!siteId) {
    console.error("No site ID provided to fetchSiteInvoices");
    return [];
  }
  
  console.log("Fetching invoices for site:", siteId);
  
  try {
    const { data, error } = await supabase
      .from('site_invoices')
      .select('*')
      .eq('site_id', siteId);
      
    if (error) {
      console.error('Error fetching site invoices:', error);
      return [];
    }
    
    if (!data || data.length === 0) {
      console.log("No invoices found for site:", siteId);
      return [];
    }
    
    console.log(`Found ${data.length} invoices for site ${siteId}`);
    
    // Map the data to the correct format
    return data.map(invoice => {
      // Handle material_items JSON parsing safely
      let materialItems: any[] = [];
      try {
        // Check if material_items is already an object (not a string)
        if (typeof invoice.material_items === 'object' && invoice.material_items !== null) {
          if (Array.isArray(invoice.material_items)) {
            // Explicitly cast with type guard to ensure we have necessary properties
            materialItems = (invoice.material_items as any[]).map(item => ({
              id: item.id || undefined,
              material: item.material || '',
              quantity: typeof item.quantity === 'number' ? item.quantity : null,
              rate: typeof item.rate === 'number' ? item.rate : null,
              gstPercentage: typeof item.gstPercentage === 'number' ? item.gstPercentage : null,
              amount: typeof item.amount === 'number' ? item.amount : null
            }));
          } else {
            materialItems = [];
            console.warn('material_items is an object but not an array:', invoice.material_items);
          }
        } else if (invoice.material_items) {
          const parsedItems = JSON.parse(invoice.material_items as string);
          if (Array.isArray(parsedItems)) {
            materialItems = parsedItems.map(item => ({
              id: item.id || undefined,
              material: item.material || '',
              quantity: typeof item.quantity === 'number' ? item.quantity : null,
              rate: typeof item.rate === 'number' ? item.rate : null,
              gstPercentage: typeof item.gstPercentage === 'number' ? item.gstPercentage : null,
              amount: typeof item.amount === 'number' ? item.amount : null
            }));
          }
        }
      } catch (e) {
        console.error('Error parsing material items:', e);
      }
      
      // Handle bank_details JSON parsing safely
      let bankDetails = {
        accountNumber: '',
        bankName: '',
        ifscCode: ''
      };
      
      try {
        // Check if bank_details is already an object (not a string)
        if (typeof invoice.bank_details === 'object' && invoice.bank_details !== null) {
          const typedBankDetails = invoice.bank_details as Record<string, any>;
          bankDetails = {
            accountNumber: typedBankDetails.accountNumber || '',
            bankName: typedBankDetails.bankName || '',
            ifscCode: typedBankDetails.ifscCode || ''
          };
        } else if (invoice.bank_details) {
          const parsedDetails = JSON.parse(invoice.bank_details as string);
          bankDetails = {
            accountNumber: parsedDetails.accountNumber || '',
            bankName: parsedDetails.bankName || '',
            ifscCode: parsedDetails.ifscCode || ''
          };
        }
      } catch (e) {
        console.error('Error parsing bank details:', e);
      }
      
      return {
        id: invoice.id,
        date: new Date(invoice.date),
        partyId: invoice.party_id,
        partyName: invoice.party_name,
        material: invoice.material,
        quantity: Number(invoice.quantity),
        rate: Number(invoice.rate),
        gstPercentage: Number(invoice.gst_percentage),
        grossAmount: Number(invoice.gross_amount),
        netAmount: Number(invoice.net_amount),
        materialItems: materialItems,
        bankDetails: bankDetails,
        billUrl: invoice.bill_url,
        paymentStatus: invoice.payment_status as any,
        createdBy: invoice.created_by || '',
        createdAt: new Date(invoice.created_at),
        approverType: invoice.approver_type as "ho" | "supervisor" || "ho",
        siteId: invoice.site_id || ''
      };
    });
  } catch (error) {
    console.error('Error in fetchSiteInvoices:', error);
    return [];
  }
};

// Helper function to calculate the total amount of paid invoices for a site
export const calculatePaidInvoicesTotalForSite = async (siteId: string) => {
  if (!siteId) {
    console.error("No site ID provided to calculatePaidInvoicesTotalForSite");
    return 0;
  }
  
  try {
    const invoices = await fetchSiteInvoices(siteId);
    
    // Filter for paid invoices
    const paidInvoices = invoices.filter(invoice => invoice.paymentStatus === 'paid');
    
    // Calculate the total amount
    const total = paidInvoices.reduce((sum, invoice) => sum + invoice.netAmount, 0);
    
    console.log(`Calculated paid invoices total for site ${siteId}: ${total}`);
    return total;
  } catch (error) {
    console.error('Error calculating paid invoices total:', error);
    return 0;
  }
};

// Helper function to fetch sites by supervisor ID
export const fetchSitesBySupervisorId = async (supervisorId: string) => {
  if (!supervisorId) {
    console.error("No supervisor ID provided to fetchSitesBySupervisorId");
    return [];
  }
  
  try {
    console.log("Fetching sites for supervisor:", supervisorId);
    
    const { data, error } = await supabase
      .from('sites')
      .select('*')
      .eq('supervisor_id', supervisorId);
      
    if (error) {
      console.error('Error fetching sites for supervisor:', error);
      return [];
    }
    
    if (!data || data.length === 0) {
      console.log("No sites found for supervisor:", supervisorId);
      return [];
    }
    
    console.log(`Found ${data.length} sites for supervisor ${supervisorId}:`, data);
    
    // Map the data to the Site type
    return data.map(site => ({
      id: site.id,
      name: site.name,
      jobName: site.job_name,
      posNo: site.pos_no,
      location: site.location,
      startDate: new Date(site.start_date),
      completionDate: site.completion_date ? new Date(site.completion_date) : undefined,
      supervisorId: site.supervisor_id,
      isCompleted: site.is_completed || false,
      funds: site.funds || 0,
      totalFunds: site.total_funds || 0,
      createdAt: new Date(site.created_at)
    }));
  } catch (error) {
    console.error('Error in fetchSitesBySupervisorId:', error);
    return [];
  }
};
